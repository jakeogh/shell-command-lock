#!/bin/sh

# fixme: extra line at bottom and top of test if ./commandloc_test is run from here(?) instead of /bin

#echo "[$$] $0 Testing source requirement."
msg_bang=$(commandlock)
if [ -z "${msg_bang##source_this_file*}" ];
then
    :
else
    echo "[$$] $0 source requirement test failed on #! execution."
    exit 1
fi

# todo: check for "source_this_file" output in addition to exit code
# todo: re-evaluate #!/bin/echo per greycat; exits 0 on "error"
# todo: use stderr

#echo "[$$] $0 Testing source requirement for bash execution of abs path."
path=`whereis commandlock | cut -d ' ' -f 2`
#echo "[$$] $0 whereis found ${path}"
bash "${path}" > /dev/null && { echo "[$$] $0 bash execution test failed for absolute path: ${path}" ; exit 1 ; }
#echo "[$$] $0 source requirement for bash execution of abs path test passed."

#echo "[$$] $0 Testing source requirement for bash execution of relative path."
bash commandlock > /dev/null && { echo "[$$] $0 bash execution test failed for relative path." ; exit 1 ; }
#echo "[$$] $0 source requirement for bash execution of relative path test passed."
#echo "[$$] $0 Source requirement tests passed."

echo "[$$] $0 in a non-critical section, about to acquire lock"
. commandlock
echo "[$$] $0 in a critical section, about to test lock"

commandlock_test && { echo "[$$] $0 ERROR: Locking Failed." ; exit 1 ; } || \
    echo "[$$] $0 YOU SHOULD SEE 2 ERROR MESSAGES WITH THE SAME PID != [$$]"
    echo "[$$] $0 You shoud NOT see a message starting with \"unlink: cannot unlink\""
    echo "[$$] $0 Lock test completed."
